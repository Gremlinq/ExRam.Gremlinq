<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#@ include file="T4\Constants.tt" #>
#nullable enable
using System.Linq.Expressions;
using Gremlin.Net.Process.Traversal;

namespace ExRam.Gremlinq.Core
{
    partial class GremlinQuery<T1, T2, T3, T4>
    {
<# for(var i = 2; i <= 16; i++) { #>
        IMapGremlinQuery<(<#= GetArgumentList("TItem{0}", i) #>)> IGremlinQueryBase.Select<<#= GetArgumentList("TItem{0}", i) #>>(<#= GetArgumentList("StepLabel<TItem{0}> label{0}", i) #>) => Project<(<#= GetArgumentList("TItem{0}", i) #>)>(p => p.ToTuple()<#= GetArgumentList(".By(__ => __.Select(label{0}))", "", i) #>);

        IMapGremlinQuery<(<#= GetArgumentList("TItem{0}", i) #>)> IMapGremlinQueryBase<T1>.Select<<#= GetArgumentList("TItem{0}", i) #>>(<#= GetArgumentList("Expression<Func<T1, TItem{0}>> projection{0}", i) #>) => Select<IMapGremlinQuery<(<#= GetArgumentList("TItem{0}", i) #>)>>(<#= GetArgumentList("projection{0}", i) #>);
<# } #>

<# foreach (var iface in Untyped(substitutedBaseInterfaces)){ #>
        <#= ChangeType(iface, "TResult").Replace("Base", "") #> <#= iface #>.Cast<TResult>() => CloneAs<<#= ChangeType(iface, "TResult").Replace("Base", "") #>>();
<# } #>

<# foreach (var iface in Typed(substitutedBaseInterfaces))
{ #>
        TTargetQuery IGremlinQueryBaseRec<T1, <#= iface #>>.Aggregate<TTargetQuery>(Func<<#= iface #>, StepLabel<IArrayGremlinQuery<T1[], T1, <#= iface #>>, T1[]>, TTargetQuery> continuation) => Aggregate(Scope.Global, continuation);
        TTargetQuery IGremlinQueryBaseRec<T1, <#= iface #>>.AggregateLocal<TTargetQuery>(Func<<#= iface #>, StepLabel<IArrayGremlinQuery<T1[], T1, <#= iface #>>, T1[]>, TTargetQuery> continuation) => Aggregate(Scope.Local, continuation);

        <#= iface #> IGremlinQueryBaseRec<T1, <#= iface #>>.Aggregate(StepLabel<T1[]> stepLabel) => Aggregate(Scope.Global, stepLabel);
        <#= iface #> IGremlinQueryBaseRec<T1, <#= iface #>>.AggregateLocal(StepLabel<T1[]> stepLabel) => Aggregate(Scope.Local, stepLabel);

        TTargetQuery IGremlinQueryBaseRec<T1, <#= iface #>>.As<TTargetQuery>(Func<<#= iface #>, StepLabel<<#= iface #>, T1>, TTargetQuery> continuation) => As<StepLabel<<#= iface #>, T1>, TTargetQuery>(continuation);
        <#= iface #> IGremlinQueryBaseRec<T1, <#= iface #>>.As(StepLabel<T1> stepLabel) => As(stepLabel);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.And(params Func<<#= iface #>, IGremlinQueryBase>[] andTraversals) => And(andTraversals);

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.As<TTargetQuery>(Func<<#= iface #>, StepLabel<<#= iface #>, object>, TTargetQuery> continuation) => As<StepLabel<<#= iface #>, object>, TTargetQuery>(continuation);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Barrier() => Barrier();

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Choose<TTargetQuery>(Func<<#= iface #>, IGremlinQueryBase> traversalPredicate, Func<<#= iface #>, TTargetQuery> trueChoice, Func<<#= iface #>, TTargetQuery> falseChoice) => Choose<TTargetQuery, TTargetQuery, TTargetQuery>(traversalPredicate, trueChoice, falseChoice);
        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Choose(Func<<#= iface #>, IGremlinQueryBase> traversalPredicate, Func<<#= iface #>, <#= iface #>> trueChoice) => Choose<<#= iface #>, <#= iface #>, <#= iface #>>(traversalPredicate, trueChoice);
        IGremlinQuery<object> IGremlinQueryBaseRec<<#= iface #>>.Choose(Func<<#= iface #>, IGremlinQueryBase> traversalPredicate, Func<<#= iface #>, IGremlinQueryBase> trueChoice) => Choose<IGremlinQueryBase, IGremlinQueryBase, IGremlinQuery<object>>(traversalPredicate, trueChoice);
        
        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Choose<TTargetQuery>(Func<IChooseBuilder<<#= iface #>>, IChooseBuilderWithCaseOrDefault<TTargetQuery>> continuation) => Choose<TTargetQuery>(continuation);

        TTargetQuery IGremlinQueryBaseRec<T1, <#= iface #>>.Choose<TTargetQuery>(Expression<Func<T1, bool>> predicate, Func<<#= iface #>, TTargetQuery> trueChoice, Func<<#= iface #>, TTargetQuery> falseChoice) => Choose<TTargetQuery, TTargetQuery, TTargetQuery>(predicate, trueChoice, falseChoice);
        <#= iface #> IGremlinQueryBaseRec<T1, <#= iface #>>.Choose(Expression<Func<T1, bool>> predicate, Func<<#= iface #>, <#= iface #>> trueChoice) => Choose<<#= iface #>, <#= iface #>, <#= iface #>>(predicate, trueChoice);
        IGremlinQuery<object> IGremlinQueryBaseRec<T1, <#= iface #>>.Choose(Expression<Func<T1, bool>> predicate, Func<<#= iface #>, IGremlinQueryBase> trueChoice) => Choose<IGremlinQueryBase, IGremlinQueryBase, IGremlinQuery<object>>(predicate, trueChoice);

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Coalesce<TTargetQuery>(params Func<<#= iface #>, TTargetQuery>[] traversals) => Coalesce<TTargetQuery, TTargetQuery>(traversals);
        IGremlinQuery<object> IGremlinQueryBaseRec<<#= iface #>>.Coalesce(params Func<<#= iface #>, IGremlinQueryBase>[] traversals) => Coalesce<IGremlinQueryBase, IGremlinQuery<object>>(traversals);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Coin(double probability) => Coin(probability);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.CyclicPath() => CyclicPath();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Dedup() => DedupGlobal();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.DedupLocal() => DedupLocal();

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.FlatMap<TTargetQuery>(Func<<#= iface #>, TTargetQuery> mapping) => FlatMap(mapping);

        IArrayGremlinQuery<T1[], T1, <#= iface #>> IGremlinQueryBaseRec<T1, <#= iface #>>.ForceArray() => CloneAs<IArrayGremlinQuery<T1[], T1, <#= iface #>>>();

        IArrayGremlinQuery<T1[], T1, <#= iface #>> IGremlinQueryBaseRec<T1, <#= iface #>>.Fold() => Fold<<#= iface #>>();

        IMapGremlinQuery<IDictionary<TNewKey, TNewValue>> IGremlinQueryBaseRec<T1, <#= iface #>>.Group<TNewKey, TNewValue>(Func<IGroupBuilder<<#= iface #>>, IGroupBuilderWithKeyAndValue<TNewKey, TNewValue>> groupBuilder) => Group(groupBuilder);
        IMapGremlinQuery<IDictionary<TNewKey, T1[]>> IGremlinQueryBaseRec<T1, <#= iface #>>.Group<TNewKey>(Func<IGroupBuilder<<#= iface #>>, IGroupBuilderWithKey<<#= iface #>, TNewKey>> groupBuilder) => Group(groupBuilder);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Identity() => Identity();

        <#= iface #> IGremlinQueryBaseRec<T1, <#= iface #>>.Inject(params T1[] elements) => Inject(elements);
        
        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Limit(long count) => LimitGlobal(count);

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Local<TTargetQuery>(Func<<#= iface #> , TTargetQuery> localTraversal) => Local(localTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Loop(Func<IStartLoopBuilder<<#= iface #>>, IFinalLoopBuilder<<#= iface #>>> loopBuilderTransformation) => Loop(loopBuilderTransformation);

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Map<TTargetQuery>(Func<<#= iface #>, TTargetQuery> mapping) => Map(mapping);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Max() => MaxGlobal();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Mean() => MeanGlobal();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Min() => MinGlobal();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Not(Func<<#= iface #>, IGremlinQueryBase> notTraversal) => Not(static (__, notTraversal) => notTraversal(__), notTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.None() => None();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Optional(Func<<#= iface #>, <#= iface #>> optionalTraversal) => Optional(optionalTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Or(params Func<<#= iface #>, IGremlinQueryBase>[] orTraversals) => Or(orTraversals);

        <#= iface #> IGremlinQueryBaseRec<T1, <#= iface #>>.Order(Func<IOrderBuilder<T1, <#= iface #>>, IOrderBuilderWithBy<T1, <#= iface #>>> projection) => OrderGlobal(projection);
        <#= iface #> IGremlinQueryBaseRec<T1, <#= iface #>>.OrderLocal(Func<IOrderBuilder<T1, <#= iface #>>, IOrderBuilderWithBy<T1, <#= iface #>>> projection) => OrderLocal(projection);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Order(Func<IOrderBuilder<<#= iface #>>, IOrderBuilderWithBy<<#= iface #>>> projection) => OrderGlobal(projection);
        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.OrderLocal(Func<IOrderBuilder<<#= iface #>>, IOrderBuilderWithBy<<#= iface #>>> projection) => OrderLocal(projection);

        IGremlinQuery<dynamic> IGremlinQueryBaseRec<T1, <#= iface #>>.Project(Func<IProjectBuilder<<#= iface #>, T1>, IProjectDynamicResult> continuation) => Project(continuation);
        IMapGremlinQuery<TResult> IGremlinQueryBaseRec<T1, <#= iface #>>.Project<TResult>(Func<IProjectBuilder<<#= iface #>, T1>, IProjectMapResult<TResult>> continuation) => Project(continuation);
        IMapGremlinQuery<TResult> IGremlinQueryBaseRec<T1, <#= iface #>>.Project<TResult>(Func<IProjectBuilder<<#= iface #>, T1>, IProjectTupleResult<TResult>> continuation) => Project<TResult>(continuation);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Range(long low, long high) => RangeGlobal(low, high);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.SideEffect(Func<<#= iface #>, IGremlinQueryBase> sideEffectTraversal) => SideEffect(sideEffectTraversal);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.SimplePath() => SimplePath();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Skip(long count) => Skip(count, Scope.Global);

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Sum() => SumGlobal();

        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Tail(long count) => TailGlobal(count);

        TTargetQuery IGremlinQueryBaseRec<<#= iface #>>.Union<TTargetQuery>(params Func<<#= iface #>, TTargetQuery>[] unionTraversals) => Union<TTargetQuery, TTargetQuery>(unionTraversals);
        IGremlinQuery<object> IGremlinQueryBaseRec<<#= iface #>>.Union(params Func<<#= iface #>, IGremlinQueryBase>[] unionTraversals) => Union<IGremlinQueryBase, IGremlinQuery<object>>(unionTraversals);

        <#= iface #> IGremlinQueryBaseRec<T1, <#= iface #>>.Where(Expression<Func<T1, bool>> predicate) => Where(predicate);
        <#= iface #> IGremlinQueryBaseRec<<#= iface #>>.Where(Func<<#= iface #>, IGremlinQueryBase> filterTraversal) => Where(filterTraversal);
<# } #>


<# foreach (var iface in Untyped(EdgeOrVertex(substitutedBaseInterfaces))){ #>
        <#= ChangeType(iface, "TTarget").Replace("Base", "") #> <#= iface #>.OfType<TTarget>() => OfType<TTarget, <#= ChangeType(iface, "TTarget").Replace("Base", "") #>>(<#= iface.Contains("VertexGremlinQuery") ? "Environment.Model.VerticesModel" : "Environment.Model.EdgesModel" #>);
<# } #>


<# foreach (var iface in Typed(Element(substitutedBaseInterfaces))){ #>
        <#= iface #> IElementGremlinQueryBaseRec<<#= iface #>>.Property(string key, object? value) => Property(key, value);
        <#= iface #> IElementGremlinQueryBaseRec<<#= iface #>>.Property(string key, Func<<#= iface #>, IGremlinQueryBase> valueTransformation) => Property(key, valueTransformation);

        <#= iface #> IElementGremlinQueryBaseRec<T1, <#= iface #>>.Property<TProjectedValue>(Expression<Func<T1, TProjectedValue>> projection, TProjectedValue value) => Property(projection, value);
        <#= iface #> IElementGremlinQueryBaseRec<T1, <#= iface #>>.Property<TProjectedValue>(Expression<Func<T1, TProjectedValue>> projection, StepLabel<TProjectedValue> stepLabel) => Property(projection, __ => __.Select(stepLabel));
        <#= iface #> IElementGremlinQueryBaseRec<T1, <#= iface #>>.Property<TProjectedValue>(Expression<Func<T1, TProjectedValue>> projection, Func<<#= iface #>, IGremlinQueryBase<TProjectedValue>> valueTraversal) => Property(projection, valueTraversal);

        <#= iface #> IElementGremlinQueryBaseRec<T1, <#= iface #>>.Where<TProjection>(Expression<Func<T1, TProjection>> projection, Func<IGremlinQuery<TProjection>, IGremlinQueryBase> propertyTraversal) => Where(projection, propertyTraversal);
<# } #>
   }
}

<#@ include file="T4\HelperMethods.tt" #>
